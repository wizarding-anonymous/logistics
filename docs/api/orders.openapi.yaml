openapi: 3.0.3
info:
  title: Orders Service API
  description: API for managing logistics orders, tracking, and related documents.
  version: 1.0.0
  contact:
    name: Logistics Marketplace Team
    email: dev@example-marketplace.com

servers:
  - url: https://api.example-marketplace.com/orders
    description: Production Server
  - url: http://localhost:8001/api/v1
    description: Local Development Server for Orders Service

tags:
  - name: Orders
    description: Core operations for managing orders.
  - name: Tracking
    description: Operations for tracking order status and location.
  - name: Documents
    description: Operations for handling order-related documents.

paths:
  /orders:
    get:
      tags: [Orders]
      summary: List orders
      description: Retrieves a list of orders based on filters. Access is determined by user role.
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [created, confirmed, in_transit, delivered, pod_confirmed, closed, cancelled]
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags: [Orders]
      summary: Create an order
      description: Creates a new order, typically after an offer is accepted.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'

  /orders/{orderId}:
    get:
      tags: [Orders]
      summary: Get order details
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Detailed information about the order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'

  /orders/{orderId}/status:
    patch:
      tags: [Orders]
      summary: Update order status
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [confirmed, in_transit, delivered, pod_confirmed, closed, cancelled]
                notes:
                  type: string
      responses:
        '200':
          description: Status updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusHistory'
        '400':
          $ref: '#/components/responses/BadRequest'

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        clientId:
          type: string
          format: uuid
        supplierId:
          type: string
          format: uuid
        status:
          type: string
          enum: [created, confirmed, in_transit, delivered, pod_confirmed, closed, cancelled]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        segments:
          type: array
          items:
            $ref: '#/components/schemas/ShipmentSegment'
        price:
          $ref: '#/components/schemas/Money'

    OrderCreate:
      type: object
      required: [offerId]
      properties:
        offerId:
          type: string
          format: uuid
          description: The ID of the accepted offer from which the order is created.

    ShipmentSegment:
      type: object
      properties:
        fromAddress:
          type: string
        toAddress:
          type: string
        pickupDate:
          type: string
          format: date-time
        deliveryDate:
          type: string
          format: date-time
        transportType:
          type: string
          enum: [auto_ftl, auto_ltl, rail, air, sea]

    StatusHistory:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: string
          format: date-time
        notes:
          type: string

    Money:
      type: object
      properties:
        amount:
          type: number
          format: decimal
        currency:
          type: string
          example: "RUB"

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    BadRequest:
      description: The request is malformed or invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
